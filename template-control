#!/bin/bash

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

unit=unit
unit_dir=/run/nm-unexicon/$unit
sysconfdir=/etc
unit_dir=./testing
sysconfdir=./testing
[ -d $unit_dir ] || mkdir -p -- $unit_dir

prog=$(basename $0)

syslog ()
{
	local level="$1"
	[ -n "$level" ] && shift
	if [ -n "$*" ]; then
		if type logger >/dev/null 2>&1; then
			logger -is -t $prog -p daemon.${level:-info} "${interface:+$interface: }$*"
		fi
	fi
}

unit_rebuild_config ()
{
	local file temp save conf ifiles
	syslog debug "Rebuilding configuration."
	conf=$sysconfdir/${unit}.conf
	save="$unit_dir/$(basename $conf).save"
	ifiles=$(find $unit_dir -name '*_interface' 2>/dev/null)
	if [ ! -e $save ]; then
		if [ -e $conf ]; then
			cp -pf -- $conf $save
			rm -f -- $conf
		else
			touch $save
		fi
	fi
	temp=$(mktemp "$unit_dir/$(basename $conf).XXXXXX") || return
	chmod --reference=$save $temp
	chown --reference=$save $temp
	{
		cat<<-EOF
		# $conf
		#
		# $(basename $conf) -- ${unit} configuration file
		#
		# Generated by ${prog}.
		# Any manual changes will be lost at next network event.
		#
		EOF
	}>$temp
	if [ -e $conf ]; then
		if ! diff $temp $conf &>/dev/null; then
			cp -pf -- $temp $conf
		fi
	else
		cp -pf -- $temp $conf
	fi
	rm -f -- $temp
}

unit_del ()
{
	local f existing=
	for f in $unit_dir/${1}_*; do
		[ -e $f ] || continue
		existing=yes
		break
	done
	if [ -n "$existing" ]; then
		rm -f -- $unit_dir/${1}_*
	fi
}

unit_shutdown ()
{
	local save conf
	conf=$sysconfdir/${unit}.conf
	save="$unit_dir/$(basename $conf).save"
	if [ -s $save ]; then
		cp -pf -- $save $conf
	else
		rm -f -- $conf
	fi
	rm -f -- $save
}

declare -ra scopeval=(unknown default l2tp linklocal loopback multicast pppoe private public reserved shared unexicon unxres)

unit_scope_names ()
{
	local val names=
	for val in $*; do
		names="${names:+$names }${scopeval[$val]}"
	done
	echo -n "$names"
}

unit_scope_val ()
{
	case "$1" in
	(default)	echo -n 1;;
	(l2tp)		echo -n 2;;
	(linklocal)	echo -n 3;;
	(loopback)	echo -n 4;;
	(multicast)	echo -n 5;;
	(pppoe)		echo -n 6;;
	(private)	echo -n 7;;
	(public)	echo -n 8;;
	(reserved)	echo -n 9;;
	(shared)	echo -n 10;;
	(unexicon)	echo -n 11;;
	(unxres)	echo -n 12;;
	(*)		echo -n 0;;
	esac
}

unit_test_ipv4_addr ()
{
	case "$1" in
	0.*)					echo -n default		;; # 0/8
	10.41.0.*)				echo -n shared		;; # 10.41.0/24 (NM shared)
	10.55.4.*)				echo -n unxres		;; # 10.55.4/24 (Unexicon reserved)
	10.55.5.*)				echo -n pppoe		;; # 10.55.5/24 (PPPOE direct)
	10.55.6.*)				echo -n l2tp		;; # 10.55.6/24 (L2TP direct)
	10.55.7.*)				echo -n unexicon	;; # 10.55.7/24 (Unexicon VPN)
	10.*)					echo -n private		;; # 10/8
	127.*)					echo -n loopback	;; # 127.0/8
	169.254.*)				echo -n linklocal	;; # 169.254/16
	172.1[6-9].*|172.2[0-9].*|172.3[0-1].*)	echo -n private		;; # 172.16/12
	192.168.*)				echo -n private		;; # 192.168/16
	192.0.2.*)				echo -n reserved	;; # 192.0.2/24
	192.0.0.[0-7])				echo -n reserved	;; # 192.0.0/29
	22[4-9].*|23[0-9].*)			echo -n multicast	;; # 224/4 (224-239.)
	24[0-9].*|25[0-5].*)			echo -n reserved	;; # 240/4 (240-255.)
	24[0-7].*)				echo -n reserved	;; # 240/5 (240-247.)
	24[8-9].*|25[0-5].*)			echo -n reserved	;; # 248/5 (248-255.)
	*)					echo -n public		;;
	esac
}

unit_add ()
{
	:
}

# The interface named $1 has appeared since the last run.
unit_if_add ()
{
	syslog info "add: interface $@"
	unit_add $@
}

# The interface named $1 has persisted since the last run.
unit_if_cha ()
{
	syslog info "cha: interface $@"
	unit_add $@
}

# The interface named $1 was deleted since the last run.
unit_if_del ()
{
	syslog info "del: interface $@"
	unit_del $@
}

unit_setup ()
{
	# find all the interfaces that are defined in the system with IP addresses
	local -a interfaces haveseen delones newones oldones actives addrs
	local iface scope val iname
	local -a allscopes scoping
	[ -e $unit_dir/interfaces ] && haveseen=( $(cat $unit_dir/interfaces) )
	interfaces=( $(ip -4 addr | sed -n '/^[1-9][0-9]*:/p'|cut -f2 '-d '|sed -n 's/:$//p') )
	for iface in ${interfaces[*]%@*}; do
		if ip -4 addr ls $iface|grep -q '\<UP\>' &>/dev/null; then
			actives=( ${actives[*]} $iface )
		fi
	done
	for iface in ${haveseen[*]}; do
		case " ${actives[*]} " in
		(*" $iface "*) oldones=( ${oldones[*]} $iface ) ;;
		(*) delones=( ${delones[*]} $iface ) ;;
		esac
	done
	for iface in ${actives[*]}; do
		case " ${haveseen[*]} " in
		(*" $iface "*) ;;
		(*) newones=( ${newones[*]} $iface ) ;;
		esac
	done
	 # syslog info "configd interfaces: ${interfaces[*]}"
	 # syslog info "actives interfaces: ${actives[*]}"
	for iface in ${actives[*]}; do
		iname=$(echo "$iface"|sed 's/[^a-zA-Z0-9_]/_/g')
		addrs=( $(ip -4 addr ls $iface|sed -n -r '/\<inet\>/p'|awk '{print$2}') )
		scoping=()
		for addr in ${addrs[*]%/*}; do
			scope=$(unit_test_ipv4_addr $addr)
			val=$(unit_scope_val $scope)
			allscopes[$val]="${allscopes[$val]:+${allscopes[$val]} }$iface"
			scoping[$val]=1
		done
		eval "local scopes_$iname="
		eval "scopes_$iname=\$(unit_scope_names \${!scoping[*]})"
	done
	 # syslog info "allscopes: $(unit_scope_names ${!allscopes[*]})"
	for iface in ${actives[*]}; do
		iname=$(echo "$iface"|sed 's/[^a-zA-Z0-9_]/_/g')
		 # eval "syslog info \"scopes: \$iface: \$scopes_$iname\""
	done
	 # syslog info "delones interfaces: ${delones[*]}"
	for iface in ${delones[*]}; do
		iname=$(echo "$iface"|sed 's/[^a-zA-Z0-9_]/_/g')
		[ "$iface" = lo ] || \
			eval "unit_if_del \"\$iface\" \"\$scopes_$iname\""
	done
	 # syslog info "oldones interfaces: ${oldones[*]}"
	for iface in ${oldones[*]}; do
		iname=$(echo "$iface"|sed 's/[^a-zA-Z0-9_]/_/g')
		[ "$iface" = lo ] || \
			eval "unit_if_cha \"\$iface\" \"\$scopes_$iname\""
	done
	 # syslog info "newones interfaces: ${newones[*]}"
	for iface in ${newones[*]}; do
		iname=$(echo "$iface"|sed 's/[^a-zA-Z0-9_]/_/g')
		[ "$iface" = lo ] || \
			eval "unit_if_add \"\$iface\" \"\$scopes_$iname\""
	done
	unit_rebuild_config
	for iface in ${actives[*]}; do
		echo $iface
	done >$unit_dir/interfaces
}

case "$1" in
(start|reload)
	unit_setup
	;;
(stop)
	unit_shutdown
	;;
("")
	syslog error "Missing argument."
	exit 1
	;;
(*)
	syslog error "Illegal argument '$1'."
	exit 1
	;;
esac

exit 0
