#!/bin/bash
#
# /etc/NetworkManager/dispatcher.d/39-lldp
# /etc/ppp/ip-up.d/39-lldp.sh
# /etc/ppp/ip-down.d/39-lldp.sh
# /etc/ppp/ipv6-up.d/39-lldp.sh
# /etc/ppp/ipv6-down.d/39-lldp.sh
# /usr/lib/dhcpcd/dhcpcd-hooks/39-lldp
#
# This script is for interfaces being established by NetworkManager
# and those that are being established by PPTPD or PPPOED.  We need
# to add these interfaces to the routing daemon but we restrict them
# to having routing information for the unexicon subnetwork of
# 10.55.7.0/24 for PPTPD.  NetworkManager establishes the normal
# interfaces and PPTP or PPPOE client associations, but PPTPD and
# PPPOED establish the server associations.
#

unit=lldp
unit_dir=/run/nm-unexicon/$unit
[ -d $unit_dir ] || mkdir -p -- $unit_dir

case "$0" in
(./*|../*|[^./]*)   dispatcher="$(pwd)/$0" ;;
(*)		    dispatcher="$0" ;;
esac

prog=$(basename $0)
[ "$prog" != 'dhcpcd-run-hooks' ] || prog=dhcpcd

syslog ()
{
	local level="$1"
	[ -n "$level" ] && shift
	if [ -n "$*" ]; then
		if type logger >/dev/null 2>&1; then
			logger -i -t $prog -p daemon.${level:-info} "${interface:+$interface: }$*"
		fi
	fi
}

unit_rebuild_config ()
{
	local file temp save conf ifiles
	syslog debug "Rebuilding configuration."
	conf=/etc/${unit}.conf
	save="$unit_dir/$(basename $conf).save"
	ifiles=$(find $unit_dir -name '*_interface' 2>/dev/null)
	if [ -n "$ifiles" ]; then
		if [ ! -e $save ]; then
			if [ -e $conf ]; then
				cp -pf -- $conf $save
				rm -f -- $conf
			else
				touch $save
			fi
		fi
		temp=$(mktemp "$unit_dir/$(basename $conf).XXXXXX") || return
		chmod --reference=$save $temp
		chown --reference=$save $temp
		{
			cat<<-EOF
			# $conf
			#
			# $(basename $conf) -- ${unit} configuration file
			#
			# Generated by ${unit} hook script.
			# Any manual changes will be lost at next network event.
			#
			EOF
		}>$temp
		if [ -e $conf ]; then
			if ! diff $temp $conf &>/dev/null; then
				cp -pf -- $temp $conf
				systemctl reload-or-try-restart $unit
			fi
		else
			cp -pf -- $temp $conf
			systemctl reload-or-restart $unit
		fi
		rm -f -- $temp
	else
		systemctl stop $unit
		if [ -s $save ]; then
			cp -pf -- $save $conf
		else
			rm -f -- $conf
		fi
		rm -f -- $save
	fi
}

unit_remove ()
{
	local f existing=
	for f in $unit_dir/${1}_*; do
		[ -e $f ] || continue
		existing=yes
		break
	done
	if [ -n "$existing" ]; then
		rm -f -- $unit_dir/${1}_*
		unit_rebuild_config
	fi
}

unit_add ()
{
	local ip cc cn st cy pc la lo tz cb ca
	if [ ! -s $unit_dir/ipinfodb.dat ]; then
		/usr/sbin/ipinfodb-lookup $unit_dir/ipinfodb.dat </dev/null &>/dev/null &
	fi
	if [ -s $unit_dir/ipinfodb.dat ]; then
		ip=$(echo "$dat"|awk 'BEGIN{FS=";"}{print$3}')
		cc=$(echo "$dat"|awk 'BEGIN{FS=";"}{print$4}')
		cn=$(echo "$dat"|awk 'BEGIN{FS=";"}{print$5}')
		st=$(echo "$dat"|awk 'BEGIN{FS=";"}{print$6}')
		cy=$(echo "$dat"|awk 'BEGIN{FS=";"}{print$7}')
		pc=$(echo "$dat"|awk 'BEGIN{FS=";"}{print$8}')
		la=$(echo "$dat"|awk 'BEGIN{FS=";"}{print$9}')
		lo=$(echo "$dat"|awk 'BEGIN{FS=";"}{print$10}')
		tz=$(echo "$dat"|awk 'BEGIN{FS=";"}{print$11}')
		if [ -n "$cc" ]; then
			ca="2:$cc${st:+:1:$st}${cy:+:4:$cy}${pc:+:24:$pc}"
			lldpctl -L "$ca"
		fi
		if [ -n "$la" -a -n "$lo" ]; then
			case "$la" in
				(-[0-9]*) la=$((0-la)); la="$la:S" ;;
				([0-9]*) la="$la:N" ;;
			esac
			case "$lo" in
				(-[0-9]*) lo=$((0-lo)); lo="$lo:W" ;;
				([0-9]*) lo="$lo:E" ;;
			esac
			cb="1:$la:$lo:0:m:1"
			lldpctl -L "$cb"
		fi

	fi
	:
	unit_rebuild_config
}

unit_nm_add ()
{
	unit_add $@
}

unit_nm_rmv ()
{
	unit_remove $@
}

unit_nm_cha ()
{
	if [ -n "$DEVICE_IP_IFACE" ]; then
		unit_nm_add $@
	else
		unit_nm_rmv $@
	fi
}

# Network manager up command
unit_nm_up ()
{
	syslog debug "Responding to NM up command."
	unit_nm_add $@
}

# Network manager down command
unit_nm_down ()
{
	syslog debug "Responding to NM down command."
	unit_nm_rmv $@
}

# Network manager vpn-up command
unit_nm_vpn-up ()
{
	syslog debug "Responding to NM vpn-up command."
	unit_nm_add $@
}

# Network manager vpn-down command
unit_nm_vpn-down ()
{
	syslog debug "Responding to NM vpn-down command."
	unit_nm_rmv $@
}

# Network manager dhcp4-change command
unit_nm_dhcp4-change ()
{
	syslog debug "Responding to NM dhcp4-change command."
	unit_nm_cha $@
}

# Network manager dhcp6-change command
unit_nm_dhcp6-change ()
{
	syslog debug "Responding to NM dhcp6-change command."
	unit_nm_cha $@
}

# Network manager hostname command
unit_nm_hostname ()
{
	syslog debug "Responding to NM hostname command."
	:
}

unit_ppp_add ()
{
	unit_add $@
}

unit_ppp_rmv ()
{
	unit_remove $@
}

# PPP daemon ip-up command
unit_ppp_ip-up ()
{
	unit_ppp_add $@
}

# PPP daemon ip-down command
unit_ppp_ip-down ()
{
	unit_ppp_rmv $@
}

# PPP daemon ipv6-up command
unit_ppp_ipv6-up ()
{
	unit_ppp_add $@
}

# PPP daemon ipv6-down command
unit_ppp_ipv6-down ()
{
	unit_ppp_rmv $@
}

unit_dhcp_add ()
{
	unit_add $@
}

unit_dhcp_rmv ()
{
	unit_remove $@
}

# DHCP client daemon hook command
unit_dhcpcd_hook ()
{
	case "$reason" in
	(PREINIT|CARRIER|INFORM|BOUND|RENEW|REBIND|REBOOT|IPV4LL|STATIC|3RDPARTY|TIMEOUT)
		unit_dhcp_add $interface ;;
	(EXPIRE|RELEASE|NAK|NOCARRIER|FAIL|STOP)
		unit_dhcp_rmv $interface ;;
	(DUMP|TEST|ROUTERADVERT)
		;;
	esac
}

# We just put this script in /etc/NetworkManager/dispatcher.d
# and then symbolic link it from /etc/ppp/ip{v6}-{up|down}.d/
# directories.  So, we decide what to do based on how we were
# called.

syslog debug "Dispatcher $dispatcher invoked."

case "$dispatcher" in
	(*/dispatcher.d/*)
		syslog debug "Invoked as dispatcher."
		case "$2" in
		(up)		unit_nm_up		$@ ;;
		(down)		unit_nm_down		$@ ;;
		(vpn-up)	unit_nm_vpn-up		$@ ;;
		(vpn-down)	unit_nm_vpn-down	$@ ;;
		(dhcp4-change)	unit_nm_dhcp4-change	$@ ;;
		(dhcp6-change)	unit_nm_dhcp6-change	$@ ;;
		(hostname)	unit_nm_hostname	$@ ;;
		esac
		;;
	(*/ip-up.d/*)		unit_ppp_ip-up		$@ ;;
	(*/ip-down.d/*)		unit_ppp_ip-down	$@ ;;
	(*/ipv6-up.d/*)		unit_ppp_ipv6-up	$@ ;;
	(*/ipv6-down.d/*)	unit_ppp_ipv6-down	$@ ;;
	(*/dhcpcd-run-hooks)	unit_dhcpcd_hook	$@ ;;
esac

