#!/bin/bash
#
# This script performs the changes necessary to update the configuration
# of ${unit} and start, reload or stop the unit as required.
#

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

unit=unit
unit_dir=/run/nm-unexicon/$unit
sysconfdir=/etc
unit_dir=./testing
sysconfdir=./testing
[ -d $unit_dir ] || mkdir -p -- $unit_dir

prog=$(basename $0)

if [ -e /usr/bin/update-config-functions ]; then
	. /usr/bin/update-config-functions
elif [ -e /usr/sbin/update-config-functions ]; then
	. /usr/sbin/update-config-functions
elif [ -e ./update-config-functions ]; then
	. ./update-config-functions
else
	syslog error "Cannot find functions file."
	exit 1
fi

unit_rebuild_config ()
{
	local file temp save conf ifiles
	syslog debug "Rebuilding configuration."
	conf=$sysconfdir/${unit}.conf
	save="$unit_dir/$(basename $conf).save"
	ifiles=$(find $unit_dir -name '*_interface' 2>/dev/null)
	if [ -n "$ifiles" ]; then
		if [ ! -e $save ]; then
			if [ -e $conf ]; then
				cp -pf -- $conf $save
				rm -f -- $conf
			else
				touch $save
			fi
		fi
		temp=$(mktemp "$unit_dir/$(basename $conf).XXXXXX") || return
		chmod --reference=$save $temp
		chown --reference=$save $temp
		{
			cat<<-EOF
			# $conf
			#
			# $(basename $conf) -- ${unit} configuration file
			#
			# Generated by ${prog}.
			# Any manual changes will be lost at next network event.
			#
			EOF
		}>$temp
		if [ -e $conf ]; then
			if ! diff $temp $conf &>/dev/null; then
				cp -pf -- $temp $conf
				systemctl reload-or-try-restart $unit
			fi
		else
			cp -pf -- $temp $conf
			systemctl reload-or-restart $unit
		fi
		rm -f -- $temp
	else
		systemctl stop $unit
		if [ -s $save ]; then
			cp -pf -- $save $conf
		else
			rm -f -- $conf
		fi
		rm -f -- $save
	fi
}

unit_add ()
{
	:
}

# The interface named $1 has appeared since the last run.
unit_if_add ()
{
	syslog info "add: interface $@"
	unit_add $@
}

# The interface named $1 has persisted since the last run.
unit_if_cha ()
{
	syslog info "cha: interface $@"
	unit_add $@
}

# The interface named $1 was deleted since the last run.
unit_if_del ()
{
	syslog info "del: interface $@"
	unit_del $@
}

unit_setup ()
{
	# find all the interfaces that are defined in the system with IP addresses
	local -a interfaces haveseen delones newones oldones actives addrs
	local iface scope val iname
	local -a allscopes scoping
	[ -e $unit_dir/interfaces ] && haveseen=( $(cat $unit_dir/interfaces) )
	interfaces=( $(ip -4 addr | sed -n '/^[1-9][0-9]*:/p'|cut -f2 '-d '|sed -n 's/:$//p') )
	for iface in ${interfaces[*]%@*}; do
		if ip -4 addr ls $iface|grep -q '\<UP\>' &>/dev/null; then
			actives=( ${actives[*]} $iface )
		fi
	done
	for iface in ${haveseen[*]}; do
		case " ${actives[*]} " in
		(*" $iface "*) oldones=( ${oldones[*]} $iface ) ;;
		(*) delones=( ${delones[*]} $iface ) ;;
		esac
	done
	for iface in ${actives[*]}; do
		case " ${haveseen[*]} " in
		(*" $iface "*) ;;
		(*) newones=( ${newones[*]} $iface ) ;;
		esac
	done
	 # syslog info "configd interfaces: ${interfaces[*]}"
	 # syslog info "actives interfaces: ${actives[*]}"
	for iface in ${actives[*]}; do
		iname=$(echo "$iface"|sed 's/[^a-zA-Z0-9_]/_/g')
		addrs=( $(ip -4 addr ls $iface|sed -n -r '/\<inet\>/p'|awk '{print$2}') )
		scoping=()
		for addr in ${addrs[*]%/*}; do
			scope=$(unit_test_ipv4_addr $addr)
			val=$(unit_scope_val $scope)
			allscopes[$val]="${allscopes[$val]:+${allscopes[$val]} }$iface"
			scoping[$val]=1
		done
		eval "local scopes_$iname="
		eval "scopes_$iname=\$(unit_scope_names \${!scoping[*]})"
	done
	 # syslog info "allscopes: $(unit_scope_names ${!allscopes[*]})"
	for iface in ${actives[*]}; do
		iname=$(echo "$iface"|sed 's/[^a-zA-Z0-9_]/_/g')
		 # eval "syslog info \"scopes: \$iface: \$scopes_$iname\""
	done
	 # syslog info "delones interfaces: ${delones[*]}"
	for iface in ${delones[*]}; do
		iname=$(echo "$iface"|sed 's/[^a-zA-Z0-9_]/_/g')
		[ "$iface" = lo ] || \
			eval "unit_if_del \"\$iface\" \"\$scopes_$iname\""
	done
	 # syslog info "oldones interfaces: ${oldones[*]}"
	for iface in ${oldones[*]}; do
		iname=$(echo "$iface"|sed 's/[^a-zA-Z0-9_]/_/g')
		[ "$iface" = lo ] || \
			eval "unit_if_cha \"\$iface\" \"\$scopes_$iname\""
	done
	 # syslog info "newones interfaces: ${newones[*]}"
	for iface in ${newones[*]}; do
		iname=$(echo "$iface"|sed 's/[^a-zA-Z0-9_]/_/g')
		[ "$iface" = lo ] || \
			eval "unit_if_add \"\$iface\" \"\$scopes_$iname\""
	done
	unit_rebuild_config
	for iface in ${actives[*]}; do
		echo $iface
	done >$unit_dir/interfaces
}

case "$1" in
(start|reload)
	unit_setup
	;;
(stop)
	unit_shutdown
	;;
("")
	syslog error "Missing argument."
	exit 1
	;;
(*)
	syslog error "Illegal argument '$1'."
	exit 1
	;;
esac

exit 0
