#!/bin/bash
#
# /etc/NetworkManager/dispatcher.d/19-zebra
# /etc/ppp/ip-up.d/19_zebra.sh
# /etc/ppp/ip-down.d/19_zebra.sh
# /etc/ppp/ipv6-up.d/19_zebra.sh
# /etc/ppp/ipv6-down.d/19_zebra.sh
# /usr/lib/dhcpcd/dhcpcd-hooks/19-zebra
#
# This script is for interfaces being established by NetworkManager
# and those that are being established by PPTPD or PPPOED.  We need
# to add these interfaces to the routing daemon but we restrict them
# to having routing information for the unexicon subnetwork of
# 10.55.7.0/24 for PPTPD.  NetworkManager establishes the normal
# interfaces and PPTP or PPPOE client associations, but PPTPD and
# PPPOED establish the server associations.
#

unit=zebra
unit_dir=/run/nm-unexicon/$unit
[ -d $unit_dir ] || mkdir -p -- $unit_dir

case "$0" in
(./*|../*|[^./]*)   dispatcher="$(pwd)/$0" ;;
(*)		    dispatcher="$0" ;;
esac

prog=$(basename $0)
[ "$prog" != 'dhcpcd-run-hooks' ] || prog=dhcpcd

if [ "$prog" != dhcpcd ]; then
syslog ()
{
	local level="$1"
	[ -n "$level" ] && shift
	if [ -n "$*" ]; then
		if type logger >/dev/null 2>&1; then
			logger -i -t $prog -p daemon.${level:-info} "${interface:+$interface: }$*"
		fi
	fi
}
else
	syslog debug "Running dhcpcd-hook for unit $unit..."
fi

unit_rebuild_config ()
{
	local file temp save conf ifiles rfiles
	syslog debug "Rebuilding configuration."
	conf=/etc/quagga/${unit}.conf
	save="$unit_dir/$(basename $conf).save"
	ifiles=$(find $unit_dir -name '*_interface' 2>/dev/null)
	rfiles=$(find $unit_dir -name '*_route'     2>/dev/null)
	if [ -n "$ifiles$rfiles" ]; then
		if [ ! -e $save ]; then
			if [ -e $conf ]; then
				cp -pf -- $conf $save
				rm -f -- $conf
			else
				touch $save
				chmod 0700 $save
				chown quagga.quagga $save
			fi
		fi
		temp=$(mktemp "$unit_dir/$(basename $conf).XXXXXX") || return
		chmod --reference=$save $temp
		chown --reference=$save $temp
		{
			cat<<-EOF
			! $conf
			!
			! $(basename $conf) -- ${unit} configuration file
			!
			! Generated by ${unit} hook script.
			! Any manual changes will be lost at next network event.
			!
			hostname ${unit}
			password zebra
			enable password zebra
			!
			log syslog
			!
			EOF
			[ -z "$ifiles" ] || cat $ifiles
			[ -z "$rfiles" ] || cat $rfiles|awk '{if($0&&!($0 in seen)){seen[$0]=1;print$0}}'
			cat<<-'EOF'
			!
			line vty
			 no exec-timeout
			!
			! vim: ft=uil tw=64 com=\:!!,\:! fo+=tcqlorn
			EOF
		}>$temp
		if [ -e $conf ]; then
			if ! diff $temp $conf &>/dev/null; then
				cp -pf -- $temp $conf
				systemctl reload-or-try-restart $unit || :
			fi
		else
			cp -pf -- $temp $conf
			systemctl reload-or-restart $unit || :
		fi
		rm -f -- $temp
	else
		systemctl stop $unit || :
		if [ -s $save ]; then
			cp -pf -- $save $conf
		else
			rm -f -- $conf
		fi
		rm -f -- $save
	fi
}

unit_remove ()
{
	local f existing=
	for f in $unit_dir/${1}_*; do
		[ -e $f ] || continue
		existing=yes
		break
	done
	if [ -n "$existing" ]; then
		rm -f -- $unit_dir/${1}_*
		unit_rebuild_config
	fi
}

unit_add ()
{
	local route
	[ -n "$2" ] || return
	{
		cat<<-EOF
		interface $2
		 ipv6 nd suppress-ra
		EOF
	}>$unit_dir/${1}_interface
	{
		for route in $3; do
			echo " ip route $route"
		done
	}>$unit_dir/${1}_route
	unit_rebuild_config
}

unit_nm_add ()
{
	local i route routes=
	for ((i=0;i<IP4_NUM_ROUTES;i++)); do
		eval "route=\"\$IP4_ROUTE_$i\""
		routes="${routes:+$routes }$route"
	done
	unit_add "$1" "$DEVICE_IP_IFACE" "$routes"
}

unit_nm_rmv ()
{
	unit_remove $@
}

unit_nm_cha ()
{
	if [ -n "$DEVICE_IP_IFACE" ]; then
		unit_nm_add $@
	else
		unit_nm_rmv $@
	fi
}

# Network manager up command
unit_nm_up ()
{
	syslog debug "Responding to NM up command."
	unit_nm_add $@
}

# Network manager down command
unit_nm_down ()
{
	syslog debug "Responding to NM down command."
	unit_nm_rmv $@
}

# Network manager vpn-up command
unit_nm_vpn_up ()
{
	syslog debug "Responding to NM vpn-up command."
	unit_nm_add $@
}

# Network manager vpn-down command
unit_nm_vpn_down ()
{
	syslog debug "Responding to NM vpn-down command."
	unit_nm_rmv $@
}

# Network manager dhcp4-change command
unit_nm_dhcp4_change ()
{
	syslog debug "Responding to NM dhcp4-change command."
	unit_nm_cha $@
}

# Network manager dhcp6-change command
unit_nm_dhcp6_change ()
{
	syslog debug "Responding to NM dhcp6-change command."
	unit_nm_cha $@
}

# Network manager hostname command
unit_nm_hostname ()
{
	syslog debug "Responding to NM hostname command."
	:
}

unit_ppp_add ()
{
	unit_add $@
}

unit_ppp_rmv ()
{
	unit_remove $@
}

# PPP daemon ip-up command
unit_ppp_ip_up ()
{
	local routes=
	case "$4" in
	(10.55.7.[123]) routes="10.55.7.0/24 $4" ;;
	(10.55.6.[123]) routes="10.55.6.0/24 $4" ;;
	(10.55.5.[123]) routes="10.55.5.0/24 $4" ;;
	(10.55.4.[123]) routes="10.55.4.0/24 $4" ;;
	esac
	case "$5" in
	(10.55.7.[123]) routes="10.55.7.0/24 $5" ;;
	(10.55.6.[123]) routes="10.55.6.0/24 $5" ;;
	(10.55.5.[123]) routes="10.55.5.0/24 $5" ;;
	(10.55.4.[123]) routes="10.55.4.0/24 $5" ;;
	esac
	unit_ppp_add "$1" "$1" "$routes"
}

# PPP daemon ip-down command
unit_ppp_ip_down ()
{
	unit_ppp_rmv $@
}

# PPP daemon ipv6-up command
unit_ppp_ipv6_up ()
{
	unit_ppp_add "$1" "$1" ""
}

# PPP daemon ipv6-down command
unit_ppp_ipv6_down ()
{
	unit_ppp_rmv $@
}

unit_dhcp_add ()
{
	local route routes=
	syslog debug "Responding to DHCP add command (reason: $reason)"
	routes=$(echo "$new_classless_static_routes"|awk '
		BEGIN{routes="";RS=","}
		{if(NF>=2){if(routes){routes=routes" "$1"/"$2}else{routes=$1"/"$2}}}
		END{print routes}')
	unit_add "$1" "$1" "$routes"
}

unit_dhcp_rmv ()
{
	syslog debug "Responding to DHCP rmv command (reason: $reason)"
	unit_remove $@
}

# DHCP client daemon hook command
unit_dhcpcd_hook ()
{
	syslog debug "Executing dhcpcd hook $unit (reason: $reason)"
	case "$reason" in
	(PREINIT|FAIL|RECONFIGURE)
		;;
	(INFORM|INFORM6|BOUND|BOUND6|IPV4LL|STATIC|3RDPARTY|TIMEOUT)
		unit_dhcp_add $interface
		;;
	(RENEW|RENEW6|REBIND|REBIND6|REBOOT|REBOOT6|CARRIER|NOCARRIER|DEPARTED)
		;;
	(EXPIRE|RELEASE|NAK)
		unit_dhcp_rmv $interface
		;;
	(STOP)
		;;
	(DUMP|TEST|ROUTERADVERT)
		;;
	esac
}

# We just put this script in /etc/NetworkManager/dispatcher.d
# and then symbolic link it from /etc/ppp/ip{v6}-{up|down}.d/
# directories.  So, we decide what to do based on how we were
# called.

syslog debug "Dispatcher for $unit invoked..."

case "$dispatcher" in
	(*/dispatcher.d/*)
		syslog debug "Invoked as dispatcher."
		case "$2" in
		(up)		unit_nm_up		$@ ;;
		(down)		unit_nm_down		$@ ;;
		(vpn-up)	unit_nm_vpn_up		$@ ;;
		(vpn-down)	unit_nm_vpn_down	$@ ;;
		(dhcp4-change)	unit_nm_dhcp4_change	$@ ;;
		(dhcp6-change)	unit_nm_dhcp6_change	$@ ;;
		(hostname)	unit_nm_hostname	$@ ;;
		esac
		;;
	(*/ip-up.d/*)		unit_ppp_ip_up		$@ ;;
	(*/ip-down.d/*)		unit_ppp_ip_down	$@ ;;
	(*/ipv6-up.d/*)		unit_ppp_ipv6_up	$@ ;;
	(*/ipv6-down.d/*)	unit_ppp_ipv6_down	$@ ;;
	(*/dhcpcd-run-hooks)	unit_dhcpcd_hook	$@ ;;
esac

syslog debug "...done dispatcher for $unit."

