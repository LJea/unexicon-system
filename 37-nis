#!/bin/bash
#
# /etc/NetworkManager/dispatcher.d/37-nis
# /etc/ppp/ip-up.d/37-nis.sh
# /etc/ppp/ip-down.d/37-nis.sh
# /etc/ppp/ipv6-up.d/37-nis.sh
# /etc/ppp/ipv6-down.d/37-nis.sh
# /usr/lib/dhcpcd/dhcpcd-hooks/37-nis
#
# This script is for interfaces being established by NetworkManager
# and those that are being established by PPTPD or PPPOED.  We need
# to add these interfaces to the routing daemon but we restrict them
# to having routing information for the unexicon subnetwork of
# 10.55.7.0/24 for PPTPD.  NetworkManager establishes the normal
# interfaces and PPTP or PPPOE client associations, but PPTPD and
# PPPOED establish the server associations.
#

unit=ypbind
unit_dir=/run/nm-unexicon/$unit
[ -d $unit_dir ] || mkdir -p -- $unit_dir

case "$0" in
(./*|../*|[^./]*)   dispatcher="$(pwd)/$0" ;;
(*)		    dispatcher="$0" ;;
esac

prog=$(basename $0)
[ "$prog" != 'dhcpcd-run-hooks' ] || prog=dhcpcd

if [ "$prog" != dhcpcd ]; then
syslog ()
{
	local level="$1"
	[ -n "$level" ] && shift
	if [ -n "$*" ]; then
		if type logger >/dev/null 2>&1; then
			logger -i -t $prog -p daemon.${level:-info} "${interface:+$interface: }$*"
		fi
	fi
}
else
	syslog debug "Running dhcpcd-hook for unit $unit..."
fi

unit_set_domainname ()
{
	local domainname dfiles names=
	dfiles=$(find $unit_dir -name '*_domain' 2>/dev/null)
	[ -z "$dfiles" ] || names="$(cat $dfiles|awk '{if($0&&!($0 in seen)){seen[$0]=1;print$0}}')"
	domainname="$(domainname)"
	if [ -n "$domainname" -a "$domainname" != '(none)' ]; then
		case " $domainname " in *" $names "*) return ;; esac
	fi
	domainname="$(echo "$names"|awk '{print$1}')"
	syslog info "Setting NIS/YP domain name to '$domainname'"
	domainname "$domainname"
}

unit_rebuild_config ()
{
	local file temp save conf sfiles
	syslog debug "Rebuilding configuration."
	conf=/etc/yp.conf
	save="$unit_dir/$(basename $conf).save"
	sfiles=$(find $unit_dir -name '*_servers' 2>/dev/null)
	if [ -n "$sfiles" ]; then
		if [ ! -e $save ]; then
			if [ -e $conf ]; then
				cp -pf -- $conf $save
				rm -f -- $conf
			else
				touch $save
			fi
		fi
		temp=$(mktemp "$unit_dir/$(basename $conf).XXXXXX") || return
		chmod --reference=$save $temp
		chown --reference=$save $temp
		{
			cat<<-EOF
			# $conf
			#
			# $(basename $conf) -- ${unit} configuration file
			#
			# Generated by ${unit} hook script.
			# Any manual changes will be lost at next network event.
			#
			EOF
			[ -z "$sfiles" ] || cat $sfiles|awk '{if($0&&!($0 in seen)){seen[$0]=1;print$0}}'
			cat<<-'EOF'
			
			broadcast
			EOF
		}>$temp
		if [ -e $conf ]; then
			if ! diff $temp $conf &>/dev/null; then
				cp -pf -- $temp $conf
				unit_set_domainname
				systemctl reload-or-try-restart domainname $unit nscd autofs
			fi
		else
			cp -pf -- $temp $conf
			unit_set_domainname
			systemctl reload-or-restart domainname $unit nscd autofs
		fi
		rm -f -- $temp
	else
		systemctl stop autofs nscd $unit domainname
		unit_set_domainname
		if [ -s $save ]; then
			cp -pf -- $save $conf
		else
			rm -f -- $conf
		fi
		rm -f -- $save
	fi
}

unit_remove ()
{
	local f existing=
	for f in $unit_dir/${1}_*; do
		[ -e $f ] || continue
		existing=yes
		break
	done
	if [ -n "$existing" ]; then
		rm -f -- $unit_dir/${1}_*
		unit_rebuild_config
	fi
}

unit_add ()
{
	local domain server servers
	cat /dev/null >$unit_dir/${1}_domain
	cat /dev/null >$unit_dir/${1}_servers
	if [ -n "$2$3" ]; then
		servers=$(echo "$3"|sed 's/,/ /g')
		if [ -n "$2" ]; then
			domain="$2"
			echo "$domain" >>$unit_dir/${1}_domain
			if [ -n "${servers## *}" ]; then
				for server in $servers; do
					echo "domain $domain server $server" >$unit_dir/${1}_servers
				done
			else
				echo "domain $domain broadcast" >$unit_dir/${1}_servers
			fi
		else
			for server in $servers; do
				echo "ypserver $server" >>$unit_dir/${1}_servers
			done
		fi
	fi
	if [ -n "$4$5" ]; then
		servers=$(echo "$5"|sed 's/,/ /g')
		if [ -n "$4" ]; then
			domain="$4"
			echo "$domain" >>$unit_dir/${1}_domain
			if [ -n "${servers## *}" ]; then
				for server in $servers; do
					echo "domain $domain server $server" >$unit_dir/${1}_servers
				done
			else
				echo "domain $domain broadcast" >$unit_dir/${1}_servers
			fi
		else
			for server in $servers; do
				echo "ypserver $server" >>$unit_dir/${1}_servers
			done
		fi
	fi
	[ -s $unit_dir/${1}_domain  ] || rm -f $unit_dir/${1}_domain
	[ -s $unit_dir/${1}_servers ] || rm -f $unit_dir/${1}_servers
	unit_rebuild_config
}

unit_nm_add ()
{
	unit_add "$1" "$DHCP4_NISPLUS_DOMAIN" "$DHCP4_NISPLUS_SERVERS" "$DHCP4_NIS_DOMAIN" "$DHCP4_NIS_SERVERS"
}

unit_nm_rmv ()
{
	unit_remove $@
}

unit_nm_cha ()
{
	if [ -n "$DHCP4_NISPLUS_DOMAIN$DHCP4_NISPLUS_SERVERS$DHCP4_NIS_DOMAIN$DHCP4_NIS_SERVERS" ]; then
		unit_nm_add $@
	else
		unit_nm_rmv $@
	fi
}

# Network manager up command
unit_nm_up ()
{
	syslog debug "Responding to NM up command."
	unit_nm_add $@
}

# Network manager down command
unit_nm_down ()
{
	syslog debug "Responding to NM down command."
	unit_nm_rmv $@
}

# Network manager vpn-up command
unit_nm_vpn_up ()
{
	syslog debug "Responding to NM vpn-up command."
	unit_nm_add $@
}

# Network manager vpn-down command
unit_nm_vpn_down ()
{
	syslog debug "Responding to NM vpn-down command."
	unit_nm_rmv $@
}

# Network manager dhcp4-change command
unit_nm_dhcp4_change ()
{
	syslog debug "Responding to NM dhcp4-change command."
	unit_nm_cha $@
}

# Network manager dhcp6-change command
unit_nm_dhcp6_change ()
{
	syslog debug "Responding to NM dhcp6-change command."
	unit_nm_cha $@
}

# Network manager hostname command
unit_nm_hostname ()
{
	syslog debug "Responding to NM hostname command."
	:
}

unit_ppp_add ()
{
	unit_add $@
}

unit_ppp_rmv ()
{
	unit_remove $@
}

# PPP daemon ip-up command
unit_ppp_ip_up ()
{
	:
}

# PPP daemon ip-down command
unit_ppp_ip_down ()
{
	unit_ppp_rmv $@
}

# PPP daemon ipv6-up command
unit_ppp_ipv6_up ()
{
	:
}

# PPP daemon ipv6-down command
unit_ppp_ipv6_down ()
{
	unit_ppp_rmv $@
}

unit_dhcp_add ()
{
	syslog debug "Responding to DHCP add command (reason: $reason)"
	unit_add "$1" "$new_nisplus_domain" "$new_nisplus_servers" "$new_nis_domain" "$new_nis_servers"
}

unit_dhcp_rmv ()
{
	syslog debug "Responding to DHCP rmv command (reason: $reason)"
	unit_remove $@
}

# DHCP client daemon hook command
unit_dhcpcd_hook ()
{
	case "$reason" in
	(PREINIT|CARRIER|INFORM|BOUND|RENEW|REBIND|REBOOT|IPV4LL|STATIC|3RDPARTY|TIMEOUT)
		unit_dhcp_add $interface ;;
	(EXPIRE|RELEASE|NAK|NOCARRIER|FAIL|STOP)
		unit_dhcp_rmv $interface ;;
	(DUMP|TEST|ROUTERADVERT)
		;;
	esac
}

# We just put this script in /etc/NetworkManager/dispatcher.d
# and then symbolic link it from /etc/ppp/ip{v6}-{up|down}.d/
# directories.  So, we decide what to do based on how we were
# called.

syslog debug "Dispatcher for $unit invoked..."

case "$dispatcher" in
	(*/dispatcher.d/*)
		syslog debug "Invoked as dispatcher."
		case "$2" in
		(up)		unit_nm_up		$@ ;;
		(down)		unit_nm_down		$@ ;;
		(vpn-up)	unit_nm_vpn_up		$@ ;;
		(vpn-down)	unit_nm_vpn_down	$@ ;;
		(dhcp4-change)	unit_nm_dhcp4_change	$@ ;;
		(dhcp6-change)	unit_nm_dhcp6_change	$@ ;;
		(hostname)	unit_nm_hostname	$@ ;;
		esac
		;;
	(*/ip-up.d/*)		unit_ppp_ip_up		$@ ;;
	(*/ip-down.d/*)		unit_ppp_ip_down	$@ ;;
	(*/ipv6-up.d/*)		unit_ppp_ipv6_up	$@ ;;
	(*/ipv6-down.d/*)	unit_ppp_ipv6_down	$@ ;;
	(*/dhcpcd-run-hooks)	unit_dhcpcd_hook	$@ ;;
esac

syslog debug "...done dispatcher for $unit."
